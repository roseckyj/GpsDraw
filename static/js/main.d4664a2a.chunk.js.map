{"version":3,"sources":["utils/getDistance.ts","components/MapWrapper.tsx","App.tsx","index.tsx"],"names":["toRadian","degree","Math","PI","MapWrapper","state","center","zoom","location","points","pointId","shape","this","length","position","toSet","drawEnabled","push","origin","destination","lon1","lat1","lon2","lat2","deltaLat","deltaLon","a","pow","sin","cos","asin","sqrt","getDistance","setState","Map","viewport","zoomControl","onmousemove","e","positionChanged","latlng","lat","lng","onViewportChange","maxZoom","ZoomControl","TileLayer","url","opacity","Polyline","color","positions","CircleMarker","radius","fillColor","fillOpacity","src","process","alt","className","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4664a2a.chunk.js","sourcesContent":["import { Point } from './Point';\n\nexport function getDistance(origin: Point, destination: Point) {\n    // return distance in meters\n    var lon1 = toRadian(origin[1]),\n        lat1 = toRadian(origin[0]),\n        lon2 = toRadian(destination[1]),\n        lat2 = toRadian(destination[0]);\n\n    var deltaLat = lat2 - lat1;\n    var deltaLon = lon2 - lon1;\n\n    var a = Math.pow(Math.sin(deltaLat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon / 2), 2);\n    var c = 2 * Math.asin(Math.sqrt(a));\n    var EARTH_RADIUS = 6371;\n    return c * EARTH_RADIUS * 1000;\n}\nfunction toRadian(degree: number) {\n    return (degree * Math.PI) / 180;\n}\n","import React from 'react';\nimport { CircleMarker, Map, Polyline, TileLayer, ZoomControl } from 'react-leaflet';\nimport { getDistance } from '../utils/getDistance';\nimport { Point } from '../utils/Point';\n\nconst THRESHOLD = 5;\n\ntype IMapWrapperProps = {};\n\ntype IMapWrapperState = {\n    center: Point;\n    zoom: number;\n    location: Point;\n    points: Point[];\n    pointId: number;\n};\n\nexport default class MapWrapper extends React.Component<IMapWrapperProps, IMapWrapperState> {\n    state = {\n        center: [49.5609117, 15.9407] as Point,\n        zoom: 17,\n        location: [49.5609117, 15.9407] as Point,\n        points: [] as Point[],\n        pointId: 0,\n    };\n\n    get drawEnabled() {\n        return this.state.pointId < this.shape.length && this.state.pointId > 0;\n    }\n\n    positionChanged(position: Point) {\n        let toSet: any = {};\n        if (this.drawEnabled) {\n            this.state.points.push(position);\n            toSet.points = [...this.state.points];\n        }\n        if (\n            this.state.pointId < this.shape.length &&\n            getDistance(position, this.shape[this.state.pointId]) < THRESHOLD\n        ) {\n            toSet.pointId = this.state.pointId + 1;\n        }\n        toSet.location = position;\n        this.setState(toSet);\n    }\n\n    shape: Point[] = [\n        [49.560361, 15.941539],\n        [49.560353, 15.941695],\n        [49.560309, 15.941829],\n        [49.560183, 15.941898],\n        [49.5601, 15.941834],\n        [49.560068, 15.941652],\n        [49.560134, 15.941491],\n        [49.560235, 15.941448],\n        [49.560312, 15.941491],\n        [49.56034, 15.941491],\n        [49.560058, 15.941169],\n        [49.55994, 15.941163],\n        [49.559838, 15.941292],\n        [49.559863, 15.941512],\n        [49.559943, 15.941593],\n        [49.560037, 15.941587],\n        [49.560093, 15.941507],\n        [49.56011, 15.941378],\n        [49.560089, 15.94126],\n        [49.559916, 15.941652],\n        [49.559856, 15.94178],\n        [49.559797, 15.941925],\n        [49.559727, 15.942059],\n        [49.559672, 15.942199],\n        [49.559616, 15.94229],\n        [49.559568, 15.94236],\n        [49.559557, 15.942488],\n        [49.559616, 15.942596],\n        [49.559706, 15.942606],\n        [49.559741, 15.942542],\n        [49.559769, 15.942446],\n        [49.559787, 15.942338],\n        [49.559682, 15.942242],\n        [49.559814, 15.942301],\n        [49.559902, 15.942129],\n        [49.559943, 15.941995],\n        [49.560002, 15.941898],\n        [49.560058, 15.941727],\n    ];\n\n    render() {\n        return (\n            <Map\n                viewport={{ center: this.state.center, zoom: this.state.zoom }}\n                zoomControl={false}\n                onmousemove={(e) => {\n                    this.positionChanged([e.latlng.lat, e.latlng.lng]);\n                }}\n                onViewportChange={(e) => {\n                    this.setState({ center: e.center!, zoom: e.zoom! });\n                }}\n                maxZoom={20}\n            >\n                <ZoomControl position=\"topright\" />\n                <TileLayer url=\"https://mapserver.mapy.cz/ophoto-m/{z}-{x}-{y}\" opacity={0.3} />\n                <Polyline color=\"black\" positions={this.state.points} />\n                <CircleMarker\n                    center={this.state.location}\n                    radius={10}\n                    color=\"transparent\"\n                    fillColor=\"#7579EE\"\n                    fillOpacity={0.5}\n                ></CircleMarker>\n                {this.state.pointId < this.shape.length && (\n                    <CircleMarker\n                        center={this.shape[this.state.pointId]}\n                        radius={10}\n                        color=\"transparent\"\n                        fillColor=\"black\"\n                        fillOpacity={0.5}\n                    ></CircleMarker>\n                )}\n\n                <img\n                    src={process.env.PUBLIC_URL + '/assets/ostrovy-logo.png'}\n                    alt=\"Ostrovy pohody\"\n                    className=\"logoOp\"\n                />\n                <img src={process.env.PUBLIC_URL + '/assets/duha-logo.png'} alt=\"Duha AZ\" className=\"logoDuha\" />\n            </Map>\n        );\n    }\n}\n","import React from 'react';\nimport MapWrapper from './components/MapWrapper';\nimport './style.css';\n\nexport type AppState = {};\n\nexport class App extends React.Component<{}, AppState> {\n    componentDidMount() {}\n\n    render() {\n        return <MapWrapper />;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}