{"version":3,"sources":["utils/getDistance.ts","components/MapWrapper.tsx","App.tsx","index.tsx"],"names":["toRadian","degree","Math","PI","MapWrapper","state","center","zoom","location","points","pointId","shape","requestLocation","navigator","geolocation","getCurrentPosition","gotLocation","console","error","loc","positionChanged","coords","latitude","longitude","this","length","position","toSet","drawEnabled","push","origin","destination","lon1","lat1","lon2","lat2","deltaLat","deltaLon","a","pow","sin","cos","asin","sqrt","getDistance","setState","Map","viewport","zoomControl","onmousemove","e","onViewportChange","maxZoom","ZoomControl","TileLayer","url","opacity","Polyline","color","positions","CircleMarker","radius","fillColor","fillOpacity","src","process","alt","className","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0718910e.chunk.js","sourcesContent":["import { Point } from './Point';\n\nexport function getDistance(origin: Point, destination: Point) {\n    // return distance in meters\n    var lon1 = toRadian(origin[1]),\n        lat1 = toRadian(origin[0]),\n        lon2 = toRadian(destination[1]),\n        lat2 = toRadian(destination[0]);\n\n    var deltaLat = lat2 - lat1;\n    var deltaLon = lon2 - lon1;\n\n    var a = Math.pow(Math.sin(deltaLat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon / 2), 2);\n    var c = 2 * Math.asin(Math.sqrt(a));\n    var EARTH_RADIUS = 6371;\n    return c * EARTH_RADIUS * 1000;\n}\nfunction toRadian(degree: number) {\n    return (degree * Math.PI) / 180;\n}\n","import React from 'react';\nimport { CircleMarker, Map, Polyline, TileLayer, ZoomControl } from 'react-leaflet';\nimport { getDistance } from '../utils/getDistance';\nimport { Point } from '../utils/Point';\n\nconst THRESHOLD = 5;\n\ntype IMapWrapperProps = {};\n\ntype IMapWrapperState = {\n    center: Point;\n    zoom: number;\n    location: Point | null;\n    points: Point[];\n    pointId: number;\n};\n\nexport default class MapWrapper extends React.Component<IMapWrapperProps, IMapWrapperState> {\n    state = {\n        center: [49.244273, 16.586669] as Point,\n        zoom: 17,\n        location: null,\n        points: [] as Point[],\n        pointId: 0,\n    };\n\n    get drawEnabled() {\n        return this.state.pointId < this.shape.length && this.state.pointId > 0;\n    }\n\n    positionChanged(position: Point) {\n        let toSet: any = {};\n        if (this.drawEnabled) {\n            this.state.points.push(position);\n            toSet.points = [...this.state.points];\n        }\n        if (\n            this.state.pointId < this.shape.length &&\n            getDistance(position, this.shape[this.state.pointId]) < THRESHOLD\n        ) {\n            toSet.pointId = this.state.pointId + 1;\n        }\n        toSet.location = position;\n        this.setState(toSet);\n    }\n\n    shape: Point[] = [\n        [49.244273, 16.586669],\n        [49.244458, 16.586578],\n        [49.244535, 16.586417],\n        [49.244641, 16.585907],\n        [49.244393, 16.585559],\n        [49.244118, 16.584486],\n        [49.243923, 16.583805],\n        [49.24375, 16.583177],\n        [49.24358, 16.582571],\n        [49.243449, 16.582075],\n        [49.24354, 16.581793],\n        [49.2097939, 16.5987931],\n    ];\n\n    requestLocation = () => {\n        if (!navigator.geolocation) {\n            console.error('Geolocation is not supported by your browser');\n        } else {\n            navigator.geolocation.getCurrentPosition(this.gotLocation, () => {\n                console.error('Location error!');\n            });\n        }\n    };\n\n    gotLocation = (loc: GeolocationPosition) => {\n        this.positionChanged([loc.coords.latitude, loc.coords.longitude]);\n        this.requestLocation();\n    };\n\n    componentDidMount() {\n        this.requestLocation();\n    }\n\n    render() {\n        return (\n            <Map\n                viewport={{ center: this.state.center, zoom: this.state.zoom }}\n                zoomControl={false}\n                onmousemove={(e) => {\n                    //this.positionChanged([e.latlng.lat, e.latlng.lng]);\n                }}\n                onViewportChange={(e) => {\n                    this.setState({ center: e.center!, zoom: e.zoom! });\n                }}\n                maxZoom={20}\n            >\n                <ZoomControl position=\"topright\" />\n                <TileLayer url=\"https://mapserver.mapy.cz/ophoto-m/{z}-{x}-{y}\" opacity={0.3} />\n                <Polyline color=\"black\" positions={this.state.points} />\n                {this.state.location && (\n                    <CircleMarker\n                        center={this.state.location!}\n                        radius={10}\n                        color=\"transparent\"\n                        fillColor=\"#7579EE\"\n                        fillOpacity={0.5}\n                    ></CircleMarker>\n                )}\n                {this.state.pointId < this.shape.length && (\n                    <CircleMarker\n                        center={this.shape[this.state.pointId]}\n                        radius={10}\n                        color=\"transparent\"\n                        fillColor=\"black\"\n                        fillOpacity={0.5}\n                    ></CircleMarker>\n                )}\n\n                <img\n                    src={process.env.PUBLIC_URL + '/assets/ostrovy-logo.png'}\n                    alt=\"Ostrovy pohody\"\n                    className=\"logoOp\"\n                />\n                <img src={process.env.PUBLIC_URL + '/assets/duha-logo.png'} alt=\"Duha AZ\" className=\"logoDuha\" />\n            </Map>\n        );\n    }\n}\n","import React from 'react';\nimport MapWrapper from './components/MapWrapper';\nimport './style.css';\n\nexport type AppState = {};\n\nexport class App extends React.Component<{}, AppState> {\n    componentDidMount() {}\n\n    render() {\n        return <MapWrapper />;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}