{"version":3,"sources":["shapes.ts","utils/getDistance.ts","components/MapWrapper.tsx","App.tsx","index.tsx"],"names":["shapes","toRadian","degree","Math","PI","MapWrapper","state","center","shape","zoom","location","points","pointId","requestLocation","navigator","geolocation","getCurrentPosition","gotLocation","console","error","loc","this","length","position","toSet","drawEnabled","push","origin","destination","lon1","lat1","lon2","lat2","deltaLat","deltaLon","a","pow","sin","cos","asin","sqrt","getDistance","setState","Map","viewport","zoomControl","onmousemove","e","positionChanged","latlng","lat","lng","onViewportChange","maxZoom","ZoomControl","TileLayer","url","opacity","Polyline","color","positions","filter","val","i","weight","CircleMarker","radius","fillColor","fillOpacity","src","process","alt","className","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62e9a677.chunk.js","sourcesContent":["import { Point } from './utils/Point';\n\nexport const shapes: { [key: string]: Point[] } = {\n    snowman: [\n        [49.560309, 15.941284],\n        [49.560348, 15.941332],\n        [49.560313, 15.941405],\n        [49.560272, 15.94148],\n        [49.560335, 15.941555],\n        [49.560268, 15.941493],\n        [49.560253, 15.941542],\n        [49.56024, 15.941636],\n        [49.560203, 15.941697],\n        [49.560152, 15.941708],\n        [49.560162, 15.941787],\n        [49.560147, 15.941896],\n        [49.560118, 15.941973],\n        [49.560065, 15.942026],\n        [49.560001, 15.942051],\n        [49.55995, 15.942053],\n        [49.559979, 15.942183],\n        [49.559981, 15.94231],\n        [49.559973, 15.942403],\n        [49.55995, 15.942459],\n        [49.559921, 15.942518],\n        [49.559875, 15.942572],\n        [49.55983, 15.942609],\n        [49.559782, 15.942637],\n        [49.55974, 15.942641],\n        [49.55969, 15.942628],\n        [49.55964, 15.942602],\n        [49.5596, 15.942564],\n        [49.559568, 15.942525],\n        [49.559535, 15.942475],\n        [49.55951, 15.942409],\n        [49.559496, 15.942334],\n        [49.559495, 15.942252],\n        [49.559501, 15.942176],\n        [49.55952, 15.942074],\n        [49.559562, 15.941984],\n        [49.559605, 15.941914],\n        [49.559653, 15.941868],\n        [49.559707, 15.941851],\n        [49.559767, 15.941849],\n        [49.559822, 15.941865],\n        [49.559824, 15.9418],\n        [49.559826, 15.941708],\n        [49.559845, 15.941631],\n        [49.559879, 15.941574],\n        [49.559928, 15.941526],\n        [49.559987, 15.941509],\n        [49.560015, 15.941511],\n        [49.560007, 15.941441],\n        [49.560026, 15.941358],\n        [49.560083, 15.941298],\n        [49.56012, 15.941283],\n        [49.560056, 15.941206],\n        [49.560123, 15.941272],\n        [49.560158, 15.941201],\n        [49.56019, 15.941133],\n        [49.560231, 15.941182],\n        [49.560272, 15.941236],\n        [49.560309, 15.941284],\n    ],\n};\n","import { Point } from './Point';\n\nexport function getDistance(origin: Point, destination: Point) {\n    // return distance in meters\n    var lon1 = toRadian(origin[1]),\n        lat1 = toRadian(origin[0]),\n        lon2 = toRadian(destination[1]),\n        lat2 = toRadian(destination[0]);\n\n    var deltaLat = lat2 - lat1;\n    var deltaLon = lon2 - lon1;\n\n    var a = Math.pow(Math.sin(deltaLat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon / 2), 2);\n    var c = 2 * Math.asin(Math.sqrt(a));\n    var EARTH_RADIUS = 6371;\n    return c * EARTH_RADIUS * 1000;\n}\nfunction toRadian(degree: number) {\n    return (degree * Math.PI) / 180;\n}\n","import React from 'react';\nimport { CircleMarker, Map, Polyline, TileLayer, ZoomControl } from 'react-leaflet';\nimport { shapes } from '../shapes';\nimport { getDistance } from '../utils/getDistance';\nimport { Point } from '../utils/Point';\n\nconst THRESHOLD = 10;\nconst USE_MOUSE = true;\n\ntype IMapWrapperProps = {};\n\ntype IMapWrapperState = {\n    center: Point;\n    zoom: number;\n    location: Point | null;\n    points: Point[];\n    pointId: number;\n};\n\nexport default class MapWrapper extends React.Component<IMapWrapperProps, IMapWrapperState> {\n    state = {\n        center: this.shape[0],\n        zoom: 17,\n        location: null,\n        points: [] as Point[],\n        pointId: 0,\n    };\n\n    get drawEnabled() {\n        return this.state.pointId < this.shape.length && this.state.pointId > 0;\n    }\n\n    positionChanged(position: Point) {\n        let toSet: any = {};\n        if (this.drawEnabled) {\n            this.state.points.push(position);\n            toSet.points = [...this.state.points];\n        }\n        if (\n            this.state.pointId < this.shape.length &&\n            getDistance(position, this.shape[this.state.pointId]) < THRESHOLD\n        ) {\n            toSet.pointId = this.state.pointId + 1;\n        }\n        toSet.location = position;\n        this.setState(toSet);\n    }\n\n    get shape() {\n        return shapes.snowman;\n    }\n\n    requestLocation = () => {\n        if (!navigator.geolocation) {\n            console.error('Geolocation is not supported by your browser');\n        } else {\n            navigator.geolocation.getCurrentPosition(this.gotLocation, () => {\n                console.error('Location error!');\n            });\n        }\n    };\n\n    gotLocation = (loc: GeolocationPosition) => {\n        if (!USE_MOUSE) this.positionChanged([loc.coords.latitude, loc.coords.longitude]);\n        this.requestLocation();\n    };\n\n    componentDidMount() {\n        this.requestLocation();\n    }\n\n    render() {\n        return (\n            <Map\n                viewport={{ center: this.state.center, zoom: this.state.zoom }}\n                zoomControl={false}\n                onmousemove={(e) => {\n                    if (USE_MOUSE) this.positionChanged([e.latlng.lat, e.latlng.lng]);\n                }}\n                onViewportChange={(e) => {\n                    this.setState({ center: e.center!, zoom: e.zoom! });\n                }}\n                maxZoom={20}\n            >\n                <ZoomControl position=\"topright\" />\n                <TileLayer url=\"https://mapserver.mapy.cz/ophoto-m/{z}-{x}-{y}\" opacity={0.3} />\n                <Polyline color=\"black\" positions={this.shape.filter((val, i) => i <= this.state.pointId)} />\n                <Polyline color=\"#7579EE\" positions={this.state.points} opacity={0.2} weight={30} />\n                {this.state.location && (\n                    <CircleMarker\n                        center={this.state.location!}\n                        radius={15}\n                        color=\"transparent\"\n                        fillColor=\"#7579EE\"\n                        fillOpacity={0.5}\n                    ></CircleMarker>\n                )}\n                {this.state.pointId === 0 && (\n                    <CircleMarker\n                        center={this.shape[this.state.pointId]}\n                        radius={15}\n                        color=\"transparent\"\n                        fillColor=\"black\"\n                        fillOpacity={0.8}\n                    ></CircleMarker>\n                )}\n\n                <img\n                    src={process.env.PUBLIC_URL + '/assets/ostrovy-logo.png'}\n                    alt=\"Ostrovy pohody\"\n                    className=\"logoOp\"\n                />\n                <img src={process.env.PUBLIC_URL + '/assets/duha-logo.png'} alt=\"Duha AZ\" className=\"logoDuha\" />\n            </Map>\n        );\n    }\n}\n","import React from 'react';\nimport MapWrapper from './components/MapWrapper';\nimport './style.css';\n\nexport type AppState = {};\n\nexport class App extends React.Component<{}, AppState> {\n    componentDidMount() {}\n\n    render() {\n        return <MapWrapper />;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}